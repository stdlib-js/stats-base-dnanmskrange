{"version":3,"file":"index.mjs","sources":["../lib/dnanmskrange.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the range of a double-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} range\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import Uint8Array from '@stdlib/array-uint8' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n*\n* var v = dnanmskrange( x.length, x, 1, mask, 1 );\n* // returns 4.0\n*/\nfunction dnanmskrange( N, x, strideX, mask, strideMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default dnanmskrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the range of a double-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} range\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import Uint8Array from '@stdlib/array-uint8' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanmskrange( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\nfunction dnanmskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default dnanmskrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnanmskrange from './dnanmskrange.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnanmskrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanmskrange;\n"],"names":["dnanmskrange","N","x","strideX","mask","strideMask","max","min","ix","im","v","i","NaN","isnan","offsetX","offsetMask","setReadOnly","ndarray"],"mappings":";;4MA+CA,SAASA,EAAcC,EAAGC,EAAGC,EAASC,EAAMC,GAC3C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOW,IAYR,IATCJ,EADIL,EAAU,GACR,EAAEF,GAAKE,EAER,EAGLM,EADIJ,EAAa,GACX,EAAEJ,GAAKI,EAER,EAEAM,EAAI,EAAGA,EAAIV,KAChBS,EAAIR,EAAGM,KACIE,GAAoB,IAAfN,EAAMK,IAFHE,IAKnBH,GAAML,EACNM,GAAMJ,EAEP,GAAKM,IAAMV,EACV,OAAOW,IAKR,IAFAN,EADAC,EAAMG,EAENC,GAAK,EACIA,EAAIV,EAAGU,IACfH,GAAML,EAEDC,EADLK,GAAMJ,KAINK,EAAIR,EAAGM,GACFK,EAAOH,KAGPA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,KAGR,OAAOJ,EAAMC,EC/Cd,SAASP,EAAcC,EAAGC,EAAGC,EAASW,EAASV,EAAMC,EAAYU,GAChE,IAAIT,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOW,IAIR,IAFAJ,EAAKM,EACLL,EAAKM,EACCJ,EAAI,EAAGA,EAAIV,KAChBS,EAAIR,EAAGM,KACIE,GAAoB,IAAfN,EAAMK,IAFHE,IAKnBH,GAAML,EACNM,GAAMJ,EAEP,GAAKM,IAAMV,EACV,OAAOW,IAKR,IAFAN,EADAC,EAAMG,EAENC,GAAK,EACIA,EAAIV,EAAGU,IACfH,GAAML,EAEDC,EADLK,GAAMJ,KAINK,EAAIR,EAAGM,GACFK,EAAOH,KAGPA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,KAGR,OAAOJ,EAAMC,ECjEdS,EAAAhB,EAAA,UAAAiB"}