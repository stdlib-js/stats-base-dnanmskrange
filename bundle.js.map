{"version":3,"file":"bundle.js","sources":["../ebd11a7052869065602eb082dbeeb8","../lib/index.js"],"sourcesContent":["export default '/home/runner/work/stats-base-dnanmskrange/stats-base-dnanmskrange/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a double-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-dnanmskrange\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var dnanmskrange = require( '@stdlib/stats-base-dnanmskrange' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n*\n* var v = dnanmskrange( x.length, x, 1 );\n* // returns 4.0\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dnanmskrange = require( '@stdlib/stats-base-dnanmskrange' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanmskrange.ndarray( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar dnanmskrange = require( './main.js' );\n\n\n// MAIN //\n\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( !(tmp instanceof Error) ) {\n\tdnanmskrange = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanmskrange;\n"],"names":["join","require","tryRequire","dnanmskrange","tmp","Error","module","exports"],"mappings":";2FAAe,ICoDXA,EAAOC,QAAS,QAASD,KACzBE,EAAaD,QAAS,6BACtBE,EAAeF,QAAS,aAKxBG,EAAMF,EAAYF,ED3DP,wEC2DwB,gBAChCI,aAAeC,QACrBF,EAAeC,GAMhBE,OAAOC,QAAUJ"}